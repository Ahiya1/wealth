# ============================================
# DATABASE CONFIGURATION (REQUIRED)
# ============================================

# LOCAL DEVELOPMENT (default - uses local Supabase)
# Direct connection for local development (custom port 54432 to avoid conflicts)
# Note: Use direct connection, not pooler (:54422) for reliable Prisma operations
DATABASE_URL="postgresql://postgres:postgres@localhost:54432/postgres"
DIRECT_URL="postgresql://postgres:postgres@localhost:54432/postgres"

# Why Direct Connection for Local?
# - Eliminates pgBouncer pooler complexity
# - All Prisma operations work reliably
# - Connection pooling not needed for single developer

# PRODUCTION (use these for production Supabase deployment)
# Get from: Supabase Dashboard → Settings → Database → Connection string
#
# DATABASE_URL uses Transaction Pooler (port 6543) for serverless runtime queries
# DIRECT_URL uses Direct Connection (port 5432) for migrations and schema operations
#
# Example format:
# DATABASE_URL="postgresql://postgres.[ref]:[password]@aws-0-us-east-1.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1"
# DIRECT_URL="postgresql://postgres.[ref]:[password]@aws-0-us-east-1.pooler.supabase.com:5432/postgres"
#
# IMPORTANT for Production:
# - DATABASE_URL MUST include: ?pgbouncer=true&connection_limit=1
# - Use Transaction Pooler (port 6543) to avoid connection exhaustion
# - DIRECT_URL uses port 5432 for migrations (no pooling)

# ============================================
# SUPABASE CONFIGURATION (REQUIRED)
# ============================================

# LOCAL DEVELOPMENT
# Get these values from: npx supabase status
NEXT_PUBLIC_SUPABASE_URL="http://localhost:54421"
NEXT_PUBLIC_SUPABASE_ANON_KEY="<get from: npx supabase status - anon key>"
SUPABASE_SERVICE_ROLE_KEY="<get from: npx supabase status - service_role key>"

# PRODUCTION (use these for production Supabase deployment)
# Get from: Supabase Dashboard → Settings → API
#
# Example format:
# NEXT_PUBLIC_SUPABASE_URL="https://npylfibbutxioxjtcbvy.supabase.co"
# NEXT_PUBLIC_SUPABASE_ANON_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." (starts with eyJ)
# SUPABASE_SERVICE_ROLE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." (starts with eyJ)
#
# Security Notes:
# - NEXT_PUBLIC_* variables are PUBLIC (safe for client-side code)
# - SUPABASE_SERVICE_ROLE_KEY is SERVER-ONLY (never expose to client!)
# - In Vercel: Mark SERVICE_ROLE_KEY as "Server-only" environment variable

# Authentication Features:
# - Email/password authentication with verification
# - Magic link (passwordless) authentication
# - OAuth providers (Google, GitHub)
# - Password reset flow
# - Protected routes via middleware

# ============================================
# NEXTAUTH CONFIGURATION (DEPRECATED - will be removed)
# ============================================

# NEXTAUTH_SECRET="generate-with-openssl-rand-base64-32"
# NEXTAUTH_URL="http://localhost:3000"

# ============================================
# GOOGLE OAUTH (OPTIONAL)
# ============================================
# Get from: https://console.cloud.google.com/apis/credentials

GOOGLE_CLIENT_ID="your-google-client-id"
GOOGLE_CLIENT_SECRET="your-google-client-secret"

# ============================================
# PLAID CONFIGURATION (OPTIONAL)
# ============================================
# Get from: https://dashboard.plaid.com/developers/keys

PLAID_CLIENT_ID="your-plaid-client-id"
PLAID_SECRET="your-plaid-sandbox-secret"
PLAID_ENV="sandbox"

# Encryption key for Plaid access tokens
# Generate with: openssl rand -hex 32
ENCRYPTION_KEY="your-64-character-hex-key"

# ============================================
# ANTHROPIC CONFIGURATION (OPTIONAL)
# ============================================
# Get from: https://console.anthropic.com/

ANTHROPIC_API_KEY="sk-ant-api03-..."

# ============================================
# RESEND CONFIGURATION (OPTIONAL)
# ============================================
# Get from: https://resend.com/api-keys

RESEND_API_KEY="re_..."

# ============================================
# CRON CONFIGURATION (REQUIRED FOR PRODUCTION)
# ============================================
# Secret for protecting cron endpoints from unauthorized access
# Generate with: openssl rand -hex 32
# Used by Vercel Cron to authenticate scheduled jobs
#
# Security:
# - CRITICAL: Must be set in production to protect cron endpoints
# - Server-only variable (never expose to client)
# - Vercel automatically sends this as Authorization: Bearer [CRON_SECRET] header
# - Cron endpoints verify this secret before executing
#
# Example generation:
# openssl rand -hex 32
# Output: d57918b991ad6dd6a58cafcb82a7dae339ec7851eed27b9ce41936d1e8d08603

CRON_SECRET="your-64-character-hex-secret"

# ============================================
# ENCRYPTION KEY (REQUIRED)
# ============================================
# AES-256 encryption key for sensitive data (Plaid access tokens)
# Generate with: openssl rand -hex 32
#
# Security:
# - CRITICAL: Must be set even if not using Plaid (code references it)
# - Server-only variable (never expose to client)
# - Used for encrypting Plaid access tokens in database
# - Changing this will invalidate all encrypted tokens
#
# Already defined above under Plaid section, but documenting importance here

# ============================================
# CURRENCY - NIS ONLY (ISRAELI SHEKEL)
# ============================================
# Wealth uses NIS (₪) exclusively for production MVP
# All amounts displayed as: "X,XXX.XX ₪"
# Multi-currency support removed to simplify production deployment
# Currency fields in database default to "NIS"
